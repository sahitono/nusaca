//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "weather_prediction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub region_id: i32,
    pub parameter_id: String,
    pub unit: String,
    pub value: Option<String>,
    pub timestamp: String,
    pub created_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::region::Entity",
        from = "Column::RegionId",
        to = "super::region::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Region,
    #[sea_orm(
        belongs_to = "super::weather_parameter::Entity",
        from = "Column::ParameterId",
        to = "super::weather_parameter::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WeatherParameter,
}

impl Related<super::region::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Region.def()
    }
}

impl Related<super::weather_parameter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WeatherParameter.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
